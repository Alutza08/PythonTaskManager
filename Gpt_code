import json
import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QGraphicsView, QGraphicsScene, QGraphicsRectItem, QGraphicsTextItem, QPushButton,
    QVBoxLayout, QWidget, QDockWidget, QSlider, QLabel, QLineEdit, QMenu, QAction, QComboBox, QFileDialog
)
from PyQt5.QtCore import Qt, QRectF, QPointF, QSizeF
from PyQt5.QtGui import QPainter, QPen, QBrush, QColor, QCursor, QTransform, QFont

# Define Board class with the necessary save/load functions
class Board(QGraphicsView):
    def __init__(self):
        super().__init__()
        self.scene = QGraphicsScene()
        self.setScene(self.scene)
        self.setRenderHint(QPainter.Antialiasing)

        self.setSceneRect(0, 0, 800, 600)
        self.is_drawing = False
        self.is_eraser = False
        self.last_point = None
        self.pen = QPen(Qt.black, 5)
        self.drawing_enabled = False
        self.lines = []

        self.eraser_size = 20
        self.zoom_factor = 1.0
        self.is_dragging = False
        self.drag_start_pos = QPointF(0, 0)
        self.selected_note = None  # Keep track of the selected note

    def add_note(self, note_text, size="normal"):
        # Define the note sizes
        if size == "small":
            rect = QRectF(50, 50, 150, 150)  # Smaller note size
            font = QFont("Arial", 12)
        elif size == "normal":
            rect = QRectF(50, 50, 200, 200)  # Default note size
            font = QFont("Arial", 16)
        elif size == "large":
            rect = QRectF(50, 50, 250, 250)  # Larger note size
            font = QFont("Arial", 21)

        note = QGraphicsRectItem(rect)
        note.setBrush(QBrush(QColor("yellow")))
        note.setFlags(
            QGraphicsRectItem.ItemIsMovable | QGraphicsRectItem.ItemIsSelectable
        )

        text = QGraphicsTextItem(note_text, note)

        # Set a larger font
        text.setFont(font)

        # Enable text wrapping within the note's rectangle
        text.setTextWidth(rect.width() - 10)  # 10px margin
        text.setTextInteractionFlags(Qt.TextEditorInteraction)

        text_rect = text.boundingRect()
        # Position the text at the top-left corner of the note, with a margin
        text.setPos(
            rect.left() + 5,  # 5px margin from the left
            rect.top() + 5    # 5px margin from the top
        )

        self.scene.addItem(note)

    def save_board(self):
        # Prepare the data to be saved
        board_data = {
            "notes": [],
            "lines": [],
        }

        # Save all notes in the scene
        for item in self.scene.items():
            if isinstance(item, QGraphicsRectItem):
                note_data = {
                    "text": item.childItems()[0].toPlainText(),  # Note text
                    "rect": item.rect().getRect(),  # Position and size
                }
                board_data["notes"].append(note_data)

        # Save all lines
        for line in self.lines:
            line_data = {
                "start": (line.line().x1(), line.line().y1()),
                "end": (line.line().x2(), line.line().y2()),
            }
            board_data["lines"].append(line_data)

        # Save the data to a JSON file
        file_name, _ = QFileDialog.getSaveFileName(self, "Save Board", "", "JSON Files (*.json)")
        if file_name:
            with open(file_name, 'w') as file:
                json.dump(board_data, file, indent=4)

    def load_board(self):
        # Open a file dialog to select the JSON file
        file_name, _ = QFileDialog.getOpenFileName(self, "Load Board", "", "JSON Files (*.json)")
        if file_name:
            with open(file_name, 'r') as file:
                board_data = json.load(file)

            # Clear the current scene
            self.scene.clear()
            self.lines.clear()

            # Load notes from the file
            for note_data in board_data.get("notes", []):
                note_text = note_data["text"]
                rect = QRectF(*note_data["rect"])
                note = QGraphicsRectItem(rect)
                note.setBrush(QBrush(QColor("yellow")))
                note.setFlags(QGraphicsRectItem.ItemIsMovable | QGraphicsRectItem.ItemIsSelectable)

                text = QGraphicsTextItem(note_text, note)
                text.setFont(QFont("Arial", 16))
                text.setTextWidth(rect.width() - 10)  # 10px margin
                text.setPos(rect.left() + 5, rect.top() + 5)

                self.scene.addItem(note)

            # Load lines from the file
            for line_data in board_data.get("lines", []):
                start = QPointF(*line_data["start"])
                end = QPointF(*line_data["end"])
                line = self.scene.addLine(start.x(), start.y(), end.x(), end.y(), self.pen)
                self.lines.append(line)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Task Manager Board")

        self.board = Board()
        self.setCentralWidget(self.board)

        # Add buttons for functionality
        dock = QDockWidget("Tools", self)
        dock.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        button_layout = QVBoxLayout()

        # Button to toggle drawing mode
        toggle_drawing_button = QPushButton("Toggle Drawing Mode")
        toggle_drawing_button.clicked.connect(self.board.toggle_drawing)
        button_layout.addWidget(toggle_drawing_button)

        # Button to toggle eraser mode
        toggle_eraser_button = QPushButton("Toggle Eraser Mode")
        toggle_eraser_button.clicked.connect(self.board.toggle_eraser)
        button_layout.addWidget(toggle_eraser_button)

        # Input for note text
        self.note_input = QLineEdit()
        self.note_input.setPlaceholderText("Enter note text here")
        button_layout.addWidget(self.note_input)

        # ComboBox for selecting note size
        self.size_combo_box = QComboBox()
        self.size_combo_box.addItem("Small")
        self.size_combo_box.addItem("Normal")
        self.size_combo_box.addItem("Large")
        button_layout.addWidget(QLabel("Select Note Size:"))
        button_layout.addWidget(self.size_combo_box)

        # Button to add a note
        add_note_button = QPushButton("Add Note")
        add_note_button.clicked.connect(self.add_note)
        button_layout.addWidget(add_note_button)

        # Button to save the board
        save_button = QPushButton("Save Board")
        save_button.clicked.connect(self.board.save_board)
        button_layout.addWidget(save_button)

        # Button to load the board
        load_button = QPushButton("Load Board")
        load_button.clicked.connect(self.board.load_board)
        button_layout.addWidget(load_button)

        # Slider for drawing pen size
        self.pen_size_slider = QSlider(Qt.Horizontal)
        self.pen_size_slider.setRange(1, 20)
        self.pen_size_slider.setValue(5)
        self.pen_size_slider.valueChanged.connect(self.update_pen_size)
        pen_size_label = QLabel(f"Pen Size: {self.pen_size_slider.value()}")
        self.pen_size_slider.valueChanged.connect(lambda: pen_size_label.setText(f"Pen Size: {self.pen_size_slider.value()}"))
        button_layout.addWidget(pen_size_label)
        button_layout.addWidget(self.pen_size_slider)

        # Slider for eraser size
        self.eraser_size_slider = QSlider(Qt.Horizontal)
        self.eraser_size_slider.setRange(1, 50)
        self.eraser_size_slider.setValue(20)
        self.eraser_size_slider.valueChanged.connect(self.update_eraser_size)
        eraser_size_label = QLabel(f"Eraser Size: {self.eraser_size_slider.value()}")
        self.eraser_size_slider.valueChanged.connect(lambda: eraser_size_label.setText(f"Eraser Size: {self.eraser_size_slider.value()}"))
        button_layout.addWidget(eraser_size_label)
        button_layout.addWidget(self.eraser_size_slider)

        # Create a container for the buttons
        button_container = QWidget()
        button_container.setLayout(button_layout)
        dock.setWidget(button_container)

        self.addDockWidget(Qt.LeftDockWidgetArea, dock)

    def add_note(self):
        note_text = self.note_input.text()
        note_size = self.size_combo_box.currentText()

        if note_text:  # Only add the note if text is provided
            if note_size == "Small":
                self.board.add_note(note_text, size="small")
            elif note_size == "Normal":
                self.board.add_note(note_text, size="normal")
            elif note_size == "Large":
                self.board.add_note(note_text, size="large")

            self.note_input.clear()  # Clear input after adding

    def update_pen_size(self, value):
        self.board.update_pen_size(value)

    def update_eraser_size(self, value):
        self.board.update_eraser_size(value)

# Run the application
app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec_())
